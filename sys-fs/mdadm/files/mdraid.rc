#!/sbin/openrc-run
# Copyright 1999-2015 Gentoo Foundation
# Distributed under the terms of the GNU General Public License v2

depend() {
	before checkfs fsck
	after modules
}

start() {
	local mdadm_conf mdmod_conf mods mod dev timeout device node output #Â devs
	declare -i timeout

	mdadm_conf="/etc/mdadm/mdadm.conf"
	mdmod_conf="/etc/mdadm/mdmod.conf"
	[ -e /etc/mdadm.conf ] && [ ! -e "$mdadm_conf" ] && mdadm_conf="/etc/mdadm.conf"
	[ -e /etc/mdmod.conf ] && [ ! -e "$mdmod_conf" ] && mdmod_conf="/etc/mdmod.conf"

	if [ -x /sbin/mdadm ] && [ -f "${mdadm_conf}" ]; then
		mods="$( awk '/^\s*MODULE/ { print $2 }' "${mdadm_conf}" )"
		#devs="$( awk '/^\s*ARRAY/ { print $2 }' "${mdadm_conf}" )"

		if [ -n "${mods}" ]; then
			for mod in ${mods}; do
				if lsmod 2>&1 | grep -q "${mod//-/_}"; then
					ebegin "Loading RAID driver ${mod}"
					modprobe "${mod}"
					eend ${?} "Module load failed - storage array may be unavailable" || continue
				fi

				dev=$( grep "^\s*MODULE" "${mdmod_conf}" |
					tr -s "[:space:]" | sed 's/^ //' |
					cut -d" " -f 3-
				)

				#
				# We can't wait until all devices are present, as some of the
				# physical disks they represent may be unplugged...
				#
				timeout=50

				while [ ${timeout} -gt 0 ]; do
					for device in ${dev}; do
						[ -e "${device}" ] && break 2
					done
					[ ${timeout} -eq 50 ] && ewarn "Waiting for devices to become available ..."
					timeout=$(( timeout - 1 ))
					sleep 0.1 2>/dev/null || sleep 1
				done

				#
				# ... but we still need to give things time to settle
				#
				sleep 1
			done
		fi

		#
		# Before we start using the RAID array, we should really set the
		# IO scheduler to use on the constituent disks...
		#
		# This might better be done alongside hdparm, later in the boot
		# sequence.
		#
		local ios_name='' ios_module='' ios_queue=''
		case "${SCHEDULER}" in
			# Multiqueue
			bfq|budget)
				ios_name='Budget Fair'
				ios_module='bfq'
				ios_queue='bfq'
				ios_fallback_name='Completely Fair'
				ios_fallback_module='cfq-iosched'
				ios_fallback_queue='cfq'
				;;
			kyber)
				ios_name='Kyber'
				ios_module='kyber-iosched'
				ios_queue='kyber'
				;;
			mq-deadline)
				ios_name='Deadline [MQ]'
				ios_queue='mq-deadline'
				;;
			# Single-queue - deprecated
			cfq|fair)
				ios_name='Completely Fair'
				ios_module='cfq-iosched'
				ios_queue='cfq'
				;;
			deadline)
				ios_name='Deadline'
				ios_module='deadline-iosched'
				ios_queue='deadline'
				;;
			as|anticipatory)
				ios_name='Anticipatory'
				ios_module='as-iosched'
				ios_queue='anticipatory'
				;;
			# Default
			none)
				ios_name='No-op'
				ios_queue='none'
				;;
			*)
				case "$( cat /sys/module/scsi_mod/parameters/use_blk_mq 2>/dev/null )" in
					N)
						ios_name='Completely Fair'
						ios_module='cfq-iosched'
						ios_queue='cfq'
						;;
					Y|*)
						ios_name='Deadline [MQ]'
						ios_queue='mq-deadline'
						;;
				esac
				;;
		esac

		local module_loaded=0
		if [ -n "${ios_module:-}" ]; then
			ebegin "Loading ${ios_name} I/O scheduler"
			if [ "${ios_queue}" = 'bfq' ]; then
				if \
					[ "$( uname -r | cut -d'.' -f 1 )" = '4' -a "$( uname -r | cut -d'.' -f 2 )" -gt 11 ] ||
					[ "$( uname -r | cut -d'.' -f 1 )" -ge 5 ]
				then
					if [ "$( cat /sys/module/scsi_mod/parameters/use_blk_mq 2>/dev/null )" = 'N' ]; then
						eerror "After mainline merge in Linux 4.12, 'bfq' requires 'scsi_mod.use_blk_mq=1' to"
						eerror "be specified as a kernel option"
						eend 1 "Falling back to '${ios_fallback_name:=Completely Fair}' scheduler"
						ios_name="${ios_fallback_name}"
						ios_module="${ios_fallback_module:-cfq-iosched}"
						ios_queue="${ios_fallback_queue:-cfq}"

						ebegin "Loading ${ios_name} I/O scheduler"
						modprobe "${ios_module}"
						module_loaded=1
					fi
				fi
			fi
			if [ $(( module_loaded )) -eq 0 ]; then
				modprobe "${ios_module}"
			fi
			eend ${?}
		fi

		if [ -n "${ios_queue:-}" ]; then
			set -- discard $( grep "^\s*DEVICE\s*" "${mdadm_conf}" )
			shift
			while [ -n "${1}" ]; do
				device="$( basename "${1}" )"
				shift

				[ "${device}" = "DEVICE" ] && continue

				for node in /sys/block/"${device}"/queue/scheduler; do
					if [ -r "${node}" ]; then
						if grep -q "${ios_queue}" "${node}"; then
							ebegin "Setting I/O scheduler to '${ios_queue}' for device '${device}'"
							printf "${ios_queue}" > "${node}"
							eend $? "Cannot install ${ios_queue} scheduler"
						else
							ewarn "Not setting unavailable scheduler '${ios_queue}' for device '${device}'"
						fi
					fi
				done
			done
		fi

		if yesno "${ENABLENCQ}"; then
			#
			# Additionally, try to enble NCQ for increased performance.
			# The libATA documentation says this should work...
			#
			set -- discard $( grep "^\s*DEVICE\s*" "${mdadm_conf}" )
			shift
			while [ -n "${1}" ]; do
				device="$( basename "${1}" )"
				shift

				[ "${device}" = "DEVICE" ] && continue

				for node in /sys/block/"${device}"/device/queue_depth; do
					if [ -w "${node}" ]; then
						# Maximum depth should be 32, but 0xffffffff
						# is the same value returned when a device is
						# hot-unplugged, so that particular value is
						# masked.
						ebegin "Setting maximum NCQ depth for device '${device}'"
						( printf "31" > "${node}" ) >/dev/null 2>&1
						eend $? "NCQ unavailable"
					fi
				done
			done
		fi
	fi

	if [ $( grep '^ARRAY' "${mdadm_conf}" | grep -o "md[[:digit:]]\+" | sort | tr -d $'\n' ) != \
		$( grep 'active' /proc/mdstat | grep -o "md[[:digit:]]\+" | sort | tr -d $'\n' ) ]
	then
		ebegin "Starting up RAID devices"
		output="$( mdadm -As ${MDADM_ASSEMBLE_OPTS} 2>&1 )"
		rc=${?}
		[ -n "${output:-}" ] || rc=0
		eend $? "${output:-}"
	else
		ewarn "All RAID devices already active"
	fi

	local pat="/dev/md_d*"
	set -- ${pat}
	if [ "$*" != "${pat}" ] ; then
		ebegin "Creating RAID device partitions"
		blockdev "$@"
		eend $?
		# wait because vgscan runs next, and we want udev to fire
		sleep 1
	fi

	return 0
}

stop() {
	local output

	# XXX: Maybe drop this check ?
	[ ! -e /etc/mdadm/mdadm.conf ] && [ ! -e /etc/mdadm.conf ] && return 0

	ebegin "Shutting down RAID devices"
	output="$( mdadm -Ss 2>&1 )"
	eend $? "${output}"
}
