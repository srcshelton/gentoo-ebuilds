--- a/sandbox.c
+++ b/sandbox.c
@@ -47,17 +47,17 @@
 }
 
 /* Warn (not error) if /etc/resolv.conf is a symlink to a file outside /etc or
- * /run. */
+ * /var/run. */
 static void validate_etc_resolv_conf()
 {
     char *p = realpath("/etc/resolv.conf", NULL);
     if (p == NULL) {
         return;
     }
-    if (!g_str_has_prefix(p, "/etc") && !g_str_has_prefix(p, "/run")) {
+    if (!g_str_has_prefix(p, "/etc") && !g_str_has_prefix(p, "/var/run")) {
         fprintf(stderr,
                 "sandbox: /etc/resolv.conf (-> %s) seems a symlink to a file "
-                "outside {/etc, /run}. DNS will not work.\n",
+                "outside {/etc, /var/run}. DNS will not work.\n",
                 p);
     }
     free(p);
@@ -65,7 +65,7 @@
 
 /* lock down the process doing the following:
  - create a new mount namespace
- - bind mount /etc and /run from the host
+ - bind mount /etc and /var/run from the host
  - pivot_root in the new tmpfs.
  - drop all capabilities.
 */
@@ -107,9 +107,15 @@
         return ret;
     }
 
-    ret = mkdir("/tmp/run", 0755);
+    ret = mkdir("/tmp/var", 0755);
     if (ret < 0) {
-        fprintf(stderr, "cannot mkdir /run\n");
+        fprintf(stderr, "cannot mkdir /var\n");
+        return ret;
+    }
+
+    ret = mkdir("/tmp/var/run", 0755);
+    if (ret < 0) {
+        fprintf(stderr, "cannot mkdir /var/run\n");
         return ret;
     }
 
@@ -118,7 +124,7 @@
         return ret;
     }
 
-    ret = add_mount("/run", "/tmp/run");
+    ret = add_mount("/var/run", "/tmp/var/run");
     if (ret < 0) {
         return ret;
     }
--- a/slirp4netns.1
+++ b/slirp4netns.1
@@ -89,10 +89,10 @@
 .PP
 \fB\fC\-\-enable\-sandbox\fR (since v0.4.0)
 enter the user namespace and create a new mount namespace where only /etc and
-/run are mounted from the host.
+/var/run are mounted from the host.
 
 .PP
-Requires \fB\fC/etc/resolv.conf\fR not to be a symlink to a file outside /etc and /run.
+Requires \fB\fC/etc/resolv.conf\fR not to be a symlink to a file outside /etc and /var/run.
 
 .PP
 When running as the root, the process does not enter the user namespace but all
@@ -429,7 +429,7 @@
 
 .nf
 (host)$ nsenter \-t $(cat /tmp/pid) \-U \-n \-m
-(namespace)$ mount \-t tmpfs none /run
+(namespace)$ mount \-t tmpfs none /var/run
 (namespace)$ ip netns add foo
 (namespace)$ ip netns add bar
 (namespace)$ ip link add veth\-foo type veth peer name veth\-bar
--- a/slirp4netns.1.md
+++ b/slirp4netns.1.md
@@ -64,9 +64,9 @@
 
 `--enable-sandbox` (since v0.4.0)
 enter the user namespace and create a new mount namespace where only /etc and
-/run are mounted from the host.
+/var/run are mounted from the host.
 
-Requires `/etc/resolv.conf` not to be a symlink to a file outside /etc and /run.
+Requires `/etc/resolv.conf` not to be a symlink to a file outside /etc and /var/run.
 
 When running as the root, the process does not enter the user namespace but all
 the capabilities except `CAP_NET_BIND_SERVICE` are dropped.
@@ -273,7 +273,7 @@
 
 ```console
 (host)$ nsenter -t $(cat /tmp/pid) -U -n -m
-(namespace)$ mount -t tmpfs none /run
+(namespace)$ mount -t tmpfs none /var/run
 (namespace)$ ip netns add foo
 (namespace)$ ip netns add bar
 (namespace)$ ip link add veth-foo type veth peer name veth-bar
--- a/tests/slirp4netns-no-unmount.sh
+++ b/tests/slirp4netns-no-unmount.sh
@@ -6,10 +6,10 @@
 # it is a part of test-slirp4netns.sh
 # must run in a new mount namespace
 
-mount -t tmpfs tmpfs /run
-mkdir /run/foo
-mount -t tmpfs tmpfs /run/foo
-mount --make-rshared /run
+mount -t tmpfs tmpfs /var/run
+mkdir /var/run/foo
+mount -t tmpfs tmpfs /var/run/foo
+mount --make-rshared /var/run
 
 unshare -n sleep infinity &
 child=$!
@@ -26,4 +26,4 @@
 
 wait_for_network_device $child tun11
 
-findmnt /run/foo
+findmnt /var/run/foo
--- a/tests/test-slirp4netns.sh
+++ b/tests/test-slirp4netns.sh
@@ -23,7 +23,7 @@
 grep -v cap_sys_admin slirp.caps
 rm slirp.caps
 test -e /proc/$slirp_pid/root/etc
-test -e /proc/$slirp_pid/root/run
+test -e /proc/$slirp_pid/root/var/run
 test \! -e /proc/$slirp_pid/root/home
 test \! -e /proc/$slirp_pid/root/root
 test \! -e /proc/$slirp_pid/root/var
