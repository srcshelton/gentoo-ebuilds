--- a/functions.sh
+++ b/functions.sh
@@ -1,3 +1,4 @@
+# shellcheck shell=ash disable=2039
 # Copyright 1999-2014 Gentoo Foundation
 # Distributed under the terms of the GNU General Public License v2
 
@@ -6,6 +7,7 @@
 # not use bashisms.
 #
 
+# shellcheck disable=SC2034
 RC_GOT_FUNCTIONS="yes"
 
 #
@@ -15,28 +17,30 @@ RC_GOT_FUNCTIONS="yes"
 #
 _esetdent()
 {
-	local i="$1"
-	[ -z "$i" ] || [ "$i" -lt 0 ] && i=0
-	RC_INDENTATION=$(printf "%${i}s" '')
+	local i="${1:-}"
+	[ -z "${i:-}" ] || [ "${i}" -lt 0 ] && i=0
+	RC_INDENTATION="$( printf "%${i}s" '' )"
 }
 
 #
 #    increase the indent used for e-commands.
 #
+# shellcheck disable=SC2120
 eindent()
 {
-	local i="$1"
-	[ -n "$i" ] && [ "$i" -gt 0 ] || i=$RC_DEFAULT_INDENT
+	local i="${1:-}"
+	[ -n "${i:-}" ] && [ "${i}" -gt 0 ] || i=${RC_DEFAULT_INDENT}
 	_esetdent $(( ${#RC_INDENTATION} + i ))
 }
 
 #
 #    decrease the indent used for e-commands.
 #
+# shellcheck disable=SC2120
 eoutdent()
 {
-	local i="$1"
-	[ -n "$i" ] && [ "$i" -gt 0 ] || i=$RC_DEFAULT_INDENT
+	local i="${1:-}"
+	[ -n "${i:-}" ] && [ "${i}" -gt 0 ] || i=${RC_DEFAULT_INDENT}
 	_esetdent $(( ${#RC_INDENTATION} - i ))
 }
 
@@ -47,19 +51,19 @@ eoutdent()
 #
 yesno()
 {
-	[ -z "$1" ] && return 1
+	[ -z "${1:-}" ] && return 1
 
-	case "$1" in
+	case "${1}" in
 		[Yy][Ee][Ss]|[Tt][Rr][Uu][Ee]|[Oo][Nn]|1) return 0;;
 		[Nn][Oo]|[Ff][Aa][Ll][Ss][Ee]|[Oo][Ff][Ff]|0) return 1;;
 	esac
 
-	local value=
-	eval value=\$${1}
-	case "$value" in
+	local value=''
+	eval value="\$${1}"
+	case "${value}" in
 		[Yy][Ee][Ss]|[Tt][Rr][Uu][Ee]|[Oo][Nn]|1) return 0;;
 		[Nn][Oo]|[Ff][Aa][Ll][Ss][Ee]|[Oo][Ff][Ff]|0) return 1;;
-		*) vewarn "\$$1 is not set properly"; return 1;;
+		*) vewarn "\$${1} is not set properly"; return  1;;
 	esac
 }
 
@@ -68,17 +72,17 @@ yesno()
 #
 esyslog()
 {
-	local pri=
-	local tag=
+	local pri=''
+	local tag=''
 
-	if [ -n "$EINFO_LOG" ] && command -v logger > /dev/null 2>&1; then
-		pri="$1"
-		tag="$2"
+	if [ -n "${EINFO_LOG:-}" ] && command -v logger > /dev/null 2>&1; then
+		pri="${1:-}"
+		tag="${2:-}"
 
-		shift 2
-		[ -z "$*" ] && return 0
+		shift 2 || return 1
+		[ -z "${*:-}" ] && return 0
 
-		logger -p "${pri}" -t "${tag}" -- "$*"
+		logger -p "${pri}" -t "${tag}" -- "${*}"
 	fi
 
 	return 0
@@ -92,11 +96,11 @@ einfon()
 	if yesno "${EINFO_QUIET}"; then
 		return 0
 	fi
-	if ! yesno "${RC_ENDCOL}" && [ "${LAST_E_CMD}" = "ebegin" ]; then
+	if ! yesno "${RC_ENDCOL}" && [ "${LAST_E_CMD:-}" = 'ebegin' ]; then
 		printf "\n"
 	fi
-	printf " ${GOOD}*${NORMAL} ${RC_INDENTATION}$*"
-	LAST_E_CMD="einfon"
+	printf ' %b*%b %s%s' "${GOOD}" "${NORMAL}" "${RC_INDENTATION}" "${*:-}"
+	LAST_E_CMD='einfon'
 	return 0
 }
 
@@ -105,8 +109,8 @@ einfon()
 #
 einfo()
 {
-	einfon "$*\n"
-	LAST_E_CMD="einfo"
+	einfon "${*:-}\n"
+	LAST_E_CMD='einfo'
 	return 0
 }
 
@@ -118,17 +122,17 @@ ewarnn()
 	if yesno "${EINFO_QUIET}"; then
 		return 0
 	else
-		if ! yesno "${RC_ENDCOL}" && [ "${LAST_E_CMD}" = "ebegin" ]; then
-			printf "\n" >&2
+		if ! yesno "${RC_ENDCOL}" && [ "${LAST_E_CMD:-}" = 'ebegin' ]; then
+			printf '\n' >&2
 		fi
-		printf " ${WARN}*${NORMAL} ${RC_INDENTATION}$*" >&2
+		printf ' %b*%b %s%s' "${WARN}" "${NORMAL}" "${RC_INDENTATION}" "${*:-}" >&2
 	fi
 
 	local name="${0##*/}"
 	# Log warnings to system log
-	esyslog "daemon.warning" "${name}" "$*"
+	esyslog 'daemon.warning' "${name}" "${*:-}"
 
-	LAST_E_CMD="ewarnn"
+	LAST_E_CMD='ewarnn'
 	return 0
 }
 
@@ -140,17 +144,17 @@ ewarn()
 	if yesno "${EINFO_QUIET}"; then
 		return 0
 	else
-		if ! yesno "${RC_ENDCOL}" && [ "${LAST_E_CMD}" = "ebegin" ]; then
-			printf "\n" >&2
+		if ! yesno "${RC_ENDCOL}" && [ "${LAST_E_CMD:-}" = 'ebegin' ]; then
+			printf '\n' >&2
 		fi
-		printf " ${WARN}*${NORMAL} ${RC_INDENTATION}$*\n" >&2
+		printf ' %b*%b %s%b\n' "${WARN}" "${NORMAL}" "${RC_INDENTATION}" "${*:-}" >&2
 	fi
 
 	local name="${0##*/}"
 	# Log warnings to system log
-	esyslog "daemon.warning" "${name}" "$*"
+	esyslog 'daemon.warning' "${name}" "${*:-}"
 
-	LAST_E_CMD="ewarn"
+	LAST_E_CMD='ewarn'
 	return 0
 }
 
@@ -162,17 +166,17 @@ eerrorn()
 	if yesno "${EERROR_QUIET}"; then
 		return 1
 	else
-		if ! yesno "${RC_ENDCOL}" && [ "${LAST_E_CMD}" = "ebegin" ]; then
-			printf "\n" >&2
+		if ! yesno "${RC_ENDCOL}" && [ "${LAST_E_CMD:-}" = 'ebegin' ]; then
+			printf '\n' >&2
 		fi
-		printf " ${BAD}*${NORMAL} ${RC_INDENTATION}$*" >&2
+		printf ' %b*%b %s%s' "${BAD}" "${NORMAL}" "${RC_INDENTATION}" "${*:-}" >&2
 	fi
 
 	local name="${0##*/}"
 	# Log errors to system log
-	esyslog "daemon.err" "rc-scripts" "$*"
+	esyslog 'daemon.err' 'rc-scripts' "${*:-}"
 
-	LAST_E_CMD="eerrorn"
+	LAST_E_CMD='eerrorn'
 	return 1
 }
 
@@ -184,17 +188,17 @@ eerror()
 	if yesno "${EERROR_QUIET}"; then
 		return 1
 	else
-		if ! yesno "${RC_ENDCOL}" && [ "${LAST_E_CMD}" = "ebegin" ]; then
-			printf "\n" >&2
+		if ! yesno "${RC_ENDCOL}" && [ "${LAST_E_CMD:-}" = 'ebegin' ]; then
+			printf '\n' >&2
 		fi
-		printf " ${BAD}*${NORMAL} ${RC_INDENTATION}$*\n" >&2
+		printf ' %b*%b %s%b\n' "${BAD}" "${NORMAL}" "${RC_INDENTATION}" "${*:-}" >&2
 	fi
 
 	local name="${0##*/}"
 	# Log errors to system log
-	esyslog "daemon.err" "rc-scripts" "$*"
+	esyslog 'daemon.err' 'rc-scripts' "${*:-}"
 
-	LAST_E_CMD="eerror"
+	LAST_E_CMD='eerror'
 	return 1
 }
 
@@ -203,19 +207,19 @@ eerror()
 #
 ebegin()
 {
-	local msg="$*"
+	local msg="${*:-}"
 	if yesno "${EINFO_QUIET}"; then
 		return 0
 	fi
 
-	msg="${msg} ..."
-	einfon "${msg}"
+	msg="${msg:-} ..."
+	einfon "${msg:-}"
 	if yesno "${RC_ENDCOL}"; then
-		printf "\n"
+		printf '\n'
 	fi
 
-	LAST_E_LEN="$(( 3 + ${#RC_INDENTATION} + ${#msg} ))"
-	LAST_E_CMD="ebegin"
+	LAST_E_LEN=$(( 3 + ${#RC_INDENTATION} + ${#msg} ))
+	LAST_E_CMD='ebegin'
 	return 0
 }
 
@@ -228,31 +232,32 @@ ebegin()
 #
 _eend()
 {
-	local retval="${1:-0}" efunc="${2:-eerror}" msg
+	local retval="${1:-0}" efunc="${2:-eerror}" msg=''
 	shift 2
 
-	if [ "${retval}" = "0" ]; then
+	if [ "${retval}" = '0' ]; then
 		yesno "${EINFO_QUIET}" && return 0
 		msg="${BRACKET}[ ${GOOD}ok${BRACKET} ]${NORMAL}"
 	else
-		if [ -c /dev/null ] ; then
-			rc_splash "stop" >/dev/null 2>&1 &
+		if [ -c /dev/null ]; then
+			rc_splash 'stop' >/dev/null 2>&1 &
 		else
-			rc_splash "stop" &
+			rc_splash 'stop' &
 		fi
-		if [ -n "$*" ] ; then
-			${efunc} "$*"
+		if [ -n "${*:-}" ]; then
+			${efunc} "${*}"
 		fi
 		msg="${BRACKET}[ ${BAD}!!${BRACKET} ]${NORMAL}"
 	fi
 
 	if yesno "${RC_ENDCOL}"; then
-		printf "${ENDCOL}  ${msg}\n"
+		printf '%b  %b\n' "${ENDCOL}" "${msg}"
 	else
-		[ "${LAST_E_CMD}" = ebegin ] || LAST_E_LEN=0
+		[ "${LAST_E_CMD:-}" = 'ebegin' ] || LAST_E_LEN=0
 		printf "%$(( COLS - LAST_E_LEN - 6 ))s%b\n" '' "${msg}"
 	fi
 
+	# shellcheck disable=SC2086
 	return ${retval}
 }
 
@@ -263,11 +268,12 @@ _eend()
 eend()
 {
 	local retval="${1:-0}"
-	[ $# -eq 0 ] || shift
+	[ ${#} -eq 0 ] || shift
 
-	_eend "${retval}" eerror "$*"
+	_eend "${retval}" 'eerror' "${*:-}"
 
-	LAST_E_CMD="eend"
+	LAST_E_CMD='eend'
+	# shellcheck disable=SC2086
 	return ${retval}
 }
 
@@ -280,9 +286,10 @@ ewend()
 	local retval="${1:-0}"
 	[ $# -eq 0 ] || shift
 
-	_eend "${retval}" ewarn "$*"
+	_eend "${retval}" ewarn "${*:-}"
 
-	LAST_E_CMD="ewend"
+	LAST_E_CMD='ewend'
+	# shellcheck disable=SC2086
 	return ${retval}
 }
 
@@ -290,48 +297,52 @@ ewend()
 # The condition is negated so the return value will be zero.
 veinfo()
 {
-	yesno "${EINFO_VERBOSE}" && einfo "$@"
+	yesno "${EINFO_VERBOSE}" && einfo "${@:-}"
 }
 
 veinfon()
 {
-	yesno "${EINFO_VERBOSE}" && einfon "$@"
+	yesno "${EINFO_VERBOSE}" && einfon "${@:-}"
 }
 
 vewarn()
 {
-	yesno "${EINFO_VERBOSE}" && ewarn "$@"
+	yesno "${EINFO_VERBOSE}" && ewarn "${@:-}"
 }
 
 veerror()
 {
-	yesno "${EINFO_VERBOSE}" && eerror "$@"
+	yesno "${EINFO_VERBOSE}" && eerror "${@:-}"
 }
 
 vebegin()
 {
-	yesno "${EINFO_VERBOSE}" && ebegin "$@"
+	yesno "${EINFO_VERBOSE}" && ebegin "${@:-}"
 }
 
 veend()
 {
-	yesno "${EINFO_VERBOSE}" && { eend "$@"; return $?; }
+	yesno "${EINFO_VERBOSE}" && { eend "${@:-}"; return ${?}; }
+	# shellcheck disable=SC2086
 	return ${1:-0}
 }
 
 vewend()
 {
-	yesno "${EINFO_VERBOSE}" && { ewend "$@"; return $?; }
+	yesno "${EINFO_VERBOSE}" && { ewend "${@:-}"; return ${?}; }
+	# shellcheck disable=SC2086
 	return ${1:-0}
 }
 
 veindent()
 {
+	# shellcheck disable=SC2119
 	yesno "${EINFO_VERBOSE}" && eindent
 }
 
 veoutdent()
 {
+	# shellcheck disable=SC2119
 	yesno "${EINFO_VERBOSE}" && eoutdent
 }
 
@@ -340,18 +351,18 @@ veoutdent()
 #
 get_libdir()
 {
-	if [ -n "${CONF_LIBDIR_OVERRIDE}" ] ; then
+	if [ -n "${CONF_LIBDIR_OVERRIDE:-}" ]; then
 		CONF_LIBDIR="${CONF_LIBDIR_OVERRIDE}"
 	elif command -v portageq > /dev/null 2>&1; then
-		CONF_LIBDIR="$(portageq envvar CONF_LIBDIR)"
+		CONF_LIBDIR="$( portageq envvar CONF_LIBDIR )"
 	fi
-	printf "${CONF_LIBDIR:=lib}\n"
+	printf '%s\n' "${CONF_LIBDIR:=lib}"
 }
 
 #
 #   return 0 if gentoo=param was passed to the kernel
 #
-#   EXAMPLE:  if get_bootparam "nodevfs" ; then ....
+#   EXAMPLE:  if get_bootparam "nodevfs"; then ....
 #
 get_bootparam()
 {
@@ -359,19 +370,19 @@ get_bootparam()
 
 	[ ! -r /proc/cmdline ] && return 1
 
-	read copts < /proc/cmdline
-	for copt in $copts ; do
-		if [ "${copt%=*}" = "gentoo" ] ; then
-			params=$(gawk -v PARAMS="${copt##*=}" '
+	read -r copts < /proc/cmdline
+	for copt in ${copts:-}; do
+		if [ "${copt%=*}" = "gentoo" ]; then
+			params=$( gawk -v PARAMS="${copt##*=}" '
 				BEGIN {
 					split(PARAMS, nodes, ",")
 					for (x in nodes)
 						print nodes[x]
-				}')
+				}' )
 
 			# Parse gentoo option
-			for x in ${params} ; do
-				if [ "${x}" = "$1" ] ; then
+			for x in ${params:-}; do
+				if [ "${x}" = "${1:-}" ]; then
 #					echo "YES"
 					retval=0
 				fi
@@ -379,6 +390,7 @@ get_bootparam()
 		fi
 	done
 
+	# shellcheck disable=SC2086
 	return ${retval}
 }
 
@@ -386,16 +398,16 @@ get_bootparam()
 #   return 0 if any of the files/dirs are newer than
 #   the reference file
 #
-#   EXAMPLE: if is_older_than a.out *.o ; then ...
+#   EXAMPLE: if is_older_than a.out *.o; then ...
 is_older_than()
 {
-	local x=
-	local ref="$1"
+	local x=''
+	local ref="${1:-}"
 	[ $# -eq 0 ] || shift
 
-	for x in "$@" ; do
-		[ "${x}" -nt "${ref}" ] && return 0
-		[ -d "${x}" ] && is_older_than "${ref}" "${x}"/* && return 0
+	for x in "${@:-}"; do
+		[ "${x}" -nt "${ref:-}" ] && return 0
+		[ -d "${x}" ] && is_older_than "${ref:-}" "${x}"/* && return 0
 	done
 
 	return 1
@@ -407,42 +419,46 @@ is_older_than()
 EINFO_QUIET="${EINFO_QUIET:-no}"
 EINFO_VERBOSE="${EINFO_VERBOSE:-no}"
 
+EERROR_QUIET="${EERROR_QUIET:-no}"
+
 # Should we use color?
 RC_NOCOLOR="${RC_NOCOLOR:-no}"
 # Can the terminal handle endcols?
-RC_ENDCOL="yes"
+RC_ENDCOL='yes'
 
 # Default values for e-message indentation and dots
 RC_INDENTATION=''
 RC_DEFAULT_INDENT=2
+# shellcheck disable=SC2034
 RC_DOT_PATTERN=''
 
 # Cache the CONSOLETYPE - this is important as backgrounded shells don't
 # have a TTY. rc unsets it at the end of running so it shouldn't hang
 # around
-if [ -z "${CONSOLETYPE}" ] ; then
-	CONSOLETYPE="$(consoletype stdout 2>/dev/null )"; export CONSOLETYPE
+if [ -z "${CONSOLETYPE:-}" ]; then
+	CONSOLETYPE="$( consoletype stdout 2>/dev/null )"; export CONSOLETYPE
 fi
-if [ "${CONSOLETYPE}" = "serial" ] ; then
-	RC_NOCOLOR="yes"
-	RC_ENDCOL="no"
+if [ "${CONSOLETYPE:-}" = 'serial' ]; then
+	RC_NOCOLOR='yes'
+	RC_ENDCOL='no'
 fi
 
-for arg in "$@" ; do
+for arg in "${@:-}"; do
 	case "${arg}" in
 		# Lastly check if the user disabled it with --nocolor argument
 		--nocolor|--nocolour|-nc|-C)
-			RC_NOCOLOR="yes"
+			RC_NOCOLOR='yes'
 			;;
 	esac
 done
 
 # Setup COLS and ENDCOL so eend can line up the [ ok ]
 COLS="${COLUMNS:-0}"            # bash's internal COLUMNS variable
-[ "$COLS" -eq 0 ] && \
-        COLS="$(set -- $(stty size 2>/dev/null) ; printf "$2\n")"
-[ -z "$COLS" ] && COLS=80
-[ "$COLS" -gt 0 ] || COLS=80	# width of [ ok ] == 7
+# shellcheck disable=SC2046
+[ "${COLS:-}" -eq 0 ] && \
+        COLS="$( set -- $( stty size 2>/dev/null ); printf '%s\n' "${2:-}" )"
+[ -z "${COLS:-}" ] && COLS=80
+[ "${COLS}" -gt 0 ] || COLS=80	# width of [ ok ] == 7
 
 if yesno "${RC_ENDCOL}"; then
 	ENDCOL='\033[A\033['$(( COLS - 8 ))'C'
@@ -452,21 +468,27 @@ fi
 
 # Setup the colors so our messages all look pretty
 if yesno "${RC_NOCOLOR}"; then
-	unset GOOD WARN BAD NORMAL HILITE BRACKET
+	GOOD=''
+	WARN=''
+	BAD=''
+	NORMAL=''
+	HILITE=''
+	BRACKET=''
 elif (command -v tput && tput colors) >/dev/null 2>&1; then
-	GOOD="$(tput sgr0)$(tput bold)$(tput setaf 2)"
-	WARN="$(tput sgr0)$(tput bold)$(tput setaf 3)"
-	BAD="$(tput sgr0)$(tput bold)$(tput setaf 1)"
-	HILITE="$(tput sgr0)$(tput bold)$(tput setaf 6)"
-	BRACKET="$(tput sgr0)$(tput bold)$(tput setaf 4)"
-	NORMAL="$(tput sgr0)"
+	GOOD="$( tput sgr0 )$( tput bold )$( tput setaf 2 )"
+	WARN="$( tput sgr0 )$( tput bold )$( tput setaf 3 )"
+	BAD="$( tput sgr0 )$( tput bold )$( tput setaf 1 )"
+	HILITE="$( tput sgr0 )$( tput bold )$( tput setaf 6 )"
+	BRACKET="$( tput sgr0 )$( tput bold )$( tput setaf 4 )"
+	NORMAL="$( tput sgr0 )"
 else
-	GOOD=$(printf '\033[32;01m')
-	WARN=$(printf '\033[33;01m')
-	BAD=$(printf '\033[31;01m')
-	HILITE=$(printf '\033[36;01m')
-	BRACKET=$(printf '\033[34;01m')
-	NORMAL=$(printf '\033[0m')
+	GOOD=$( printf '\033[32;01m' )
+	WARN=$( printf '\033[33;01m' )
+	BAD=$( printf '\033[31;01m' )
+	# shellcheck disable=SC2034
+	HILITE=$( printf '\033[36;01m' )
+	BRACKET=$( printf '\033[34;01m' )
+	NORMAL=$( printf '\033[0m' )
 fi
 
 # If we made it this far, the script succeeded, so don't let failures
