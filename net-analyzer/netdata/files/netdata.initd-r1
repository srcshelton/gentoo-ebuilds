#!/sbin/openrc-run

# The user netdata is configured to run as.
#
# If you edit the netdata configuration file to set a different user then also
# make that change here too, to update file ownership...
#
: "${NETDATA_OWNER:=netdata:netdata}"

# The URL from which to download the netdata configuration.
#
: "${NETDATA_CONFIG_URL:=http://localhost:19999/netdata.conf}"

# The timeout in seconds to wait for netdata to save its database to disk and
# exit.
#
: "${NETDATA_WAIT_EXIT_TIMEOUT:=15}"

# When set to 1, if netdata does not exit in NETDATA_WAIT_EXIT_TIMEOUT seconds
# then force it to exit.
#
: "${NETDATA_FORCE_EXIT:=0}"

# Specify the path to the pidfile to be used when running in the
# background.
#
: "${NETDATA_PIDFILE:=/var/run/netdata/netdata.pid}"

# Netdata will use these services, only if they are installed and set to start.
#
: "${NETDATA_START_AFTER_SERVICES:=apache2 squid nginx mysql named opensips upsd hostapd postfix lm_sensors}"

description="Netdata system monitoring agent"

description_getconf="Save active configuration to /tmp/netdata.conf"
description_reload="Reload health configuration"
description_rotate="Reopen log files"
description_save="Force sync of database to disk"
extra_started_commands="getconf reload rotate save"

config_dir="${NETDATA_INSTALL_PATH:-}/etc/netdata"
pidfile="${NETDATA_PIDFILE}"
command_prefix="/usr/sbin"
command="${NETDATA_INSTALL_PATH:-}${command_prefix}/netdata"
command_background="yes"
command_args="-P ${pidfile} ${NETDATA_EXTRA_ARGS}"
command_args_foreground="-D"
#start_stop_daemon_args="-u ${NETDATA_OWNER}"

required_files="${config_dir}/netdata.conf"
if [ "${NETDATA_FORCE_EXIT}" -eq 1 ]; then
	retry="TERM/${NETDATA_WAIT_EXIT_TIMEOUT}/KILL/1"
else
	retry="TERM/${NETDATA_WAIT_EXIT_TIMEOUT}"
fi

depend() {
	use logger
	need net
	after ${NETDATA_START_AFTER_SERVICES}
}

start_pre() {
	local rc=0

	checkpath -o "${NETDATA_OWNER}" -m 0770 -d \
		/var/cache/netdata \
		/var/lib/netdata \
		/var/lib/netdata/registry \
		/var/run/netdata
	: $(( rc += ${?} ))
	checkpath -o "${NETDATA_OWNER}" -m 0775 -d \
		/var/log/netdata
	: $(( rc += ${?} ))

	return ${?}
}

start_post() {
	local rc=0

	if ! [ -f "${config_dir}"/netdata.conf ]; then
		ebegin "Downloading default configuration to '${config_dir}/netdata.conf'"
		#sleep 2
		curl -s -o "${config_dir}"/netdata.conf.new "${NETDATA_CONFIG_URL}" ||
			rc=$?
		if [ 0 -eq $(( rc )) ] && [ -s "${config_dir}"/netdata.conf.new ]; then
			mv "${config_dir}"/netdata.conf.new \
				"${config_dir}"/netdata.conf
		else
			rc=1
			rm "${config_dir}"/netdata.conf.new 2>/dev/null
		fi
		eend ${rc}
	fi
}

getconf() {
	local msg="Downloading configuration from netdata to /tmp/netdata.conf"

	if command -v curl >/dev/null 2>&1; then
		ebegin "${msg}"
		curl -o /tmp/netdata.conf "${NETDATA_CONFIG_URL}"
		eend ${?}
	elif command -v wget >/dev/null 2>&1; then
		ebegin "${msg}"
		wget -O /tmp/netdata.conf "${NETDATA_CONFIG_URL}"
		eend ${?}
	else
		eerror "Neither 'curl' nor 'wget' appear to be installed -" \
			"cannot fetch configuration"
		return 1
	fi
}

run_cmd() {
	cmd="${1}"
	msg="${2}"
	failmsg="${3}"
	signal="${4}"

	ebegin "${msg}"
	if [ "${NETDATA_USE_NETDATACLI}" = '1' ]; then
		"${command_prefix}/netdatacli" "${cmd}" >/dev/null
	#elif [ "${supervisor}" = "supervise-daemon" ]; then
	#	supervise-daemon "${RC_SVCNAME}" --signal "${signal}"
	else
		start-stop-daemon --signal "${signal}" --pidfile "${pidfile}"
	fi
	eend ${?} "${failmsg}"
}

reload() {
	run_cmd reload-health \
		"Reloading Netdata health configuration" \
		"Failed to reload Netdata health configuration" \
		SIGUSR2
}

rotate() {
	run_cmd reopen-logs \
		"Reopening Netdata log files" \
		"Failed to reopen Netdata log files" \
		SIGHUP
}

save() {
	run_cmd save-database \
		"Saving Netdata database" \
		"Failed to save Netdata database" \
		SIGUSR1
}

stop_post() {
	local rc=1 count=0 sigkill=0

	ebegin "Waiting for netdata to save its database"
	while [ -f "${pidfile}" ]; do
		if [ $(( count )) -gt ${NETDATA_WAIT_EXIT_TIMEOUT} ]; then
			sigkill=1
			break
		fi

		: $(( count = count + 1 ))
		kill -0 "$( < "${pidfile}" )" 2>/dev/null
		rc=${?}
		[ 0 -eq $(( rc )) ] && sleep 1
	done
	eend ${sigkill}

	if [ 1 -eq $(( sigkill )) ] && [ -f "${pidfile}" ]; then
		ebegin "Netdata is taking too long to exit, forcing it to quit"
		kill -SIGKILL "$( cat "${pidfile}" )" 2>/dev/null
		eend ${?}
	fi
}
