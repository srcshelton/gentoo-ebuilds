diff --git a/CHANGELOG.txt b/CHANGELOG.txt
index 41310e9..c395135 100644
--- a/CHANGELOG.txt
+++ b/CHANGELOG.txt
@@ -1,6 +1,10 @@
 Change Log
 ==========
 
+0.7.1a4
+-------
+Better RPi board + peri_addr detection (issue 190 / 191)
+
 0.7.1a3
 -------
 Fix PyEval_InitThreads deprecation warning for Python 3.9 (issue 188)
diff --git a/RPi/GPIO/__init__.py b/RPi/GPIO/__init__.py
index b9af4e4..3b22426 100644
--- a/RPi/GPIO/__init__.py
+++ b/RPi/GPIO/__init__.py
@@ -22,4 +22,4 @@
 
 from RPi._GPIO import *
 
-VERSION = '0.7.1a3'
+VERSION = '0.7.1a4'
diff --git a/setup.py b/setup.py
index acc27f7..5a0fadd 100644
--- a/setup.py
+++ b/setup.py
@@ -34,7 +34,7 @@
                'Topic :: System :: Hardware']
 
 setup(name             = 'RPi.GPIO',
-      version          = '0.7.1a3',
+      version          = '0.7.1a4',
       author           = 'Ben Croston',
       author_email     = 'ben@croston.org',
       description      = 'A module to control Raspberry Pi GPIO channels',
diff --git a/source/c_gpio.c b/source/c_gpio.c
index 6dc4144..42390cf 100644
--- a/source/c_gpio.c
+++ b/source/c_gpio.c
@@ -1,5 +1,5 @@
 /*
-Copyright (c) 2012-2019 Ben Croston
+Copyright (c) 2012-2021 Ben Croston
 
 Permission is hereby granted, free of charge, to any person obtaining a copy of
 this software and associated documentation files (the "Software"), to deal in
@@ -30,6 +30,8 @@ SOFTWARE.
 
 #define BCM2708_PERI_BASE_DEFAULT   0x20000000
 #define BCM2709_PERI_BASE_DEFAULT   0x3f000000
+#define BCM2710_PERI_BASE_DEFAULT   0x3f000000
+#define BCM2711_PERI_BASE_DEFAULT   0xfe000000
 #define GPIO_BASE_OFFSET            0x200000
 #define FSEL_OFFSET                 0   // 0x0000
 #define SET_OFFSET                  7   // 0x001c / 4
@@ -68,7 +70,9 @@ int setup(void)
     uint8_t *gpio_mem;
     uint32_t peri_base = 0;
     uint32_t gpio_base;
-    unsigned char buf[4];
+    uint8_t ranges[12] = { 0 };
+    uint8_t rev[4] = { 0 };
+    uint32_t cpu = 0;
     FILE *fp;
     char buffer[1024];
     char hardware[1024];
@@ -84,18 +88,51 @@ int setup(void)
         }
     }
 
-    // revert to /dev/mem method - requires root
+    // revert to /dev/mem method - requires root privileges
 
-    // determine peri_base
-    if ((fp = fopen("/proc/device-tree/soc/ranges", "rb")) != NULL) {
+    if ((fp = fopen("/proc/device-tree/soc/ranges", "rb")) != NULL)
+    {
         // get peri base from device tree
-        fseek(fp, 4, SEEK_SET);
-        if (fread(buf, 1, sizeof buf, fp) == sizeof buf) {
-            peri_base = buf[0] << 24 | buf[1] << 16 | buf[2] << 8 | buf[3] << 0;
+        if (fread(ranges, 1, sizeof(ranges), fp) >= 8) {
+            peri_base = ranges[4] << 24 | ranges[5] << 16 | ranges[6] << 8 | ranges[7] << 0;
+            if (!peri_base) {
+                peri_base = ranges[8] << 24 | ranges[9] << 16 | ranges[10] << 8 | ranges[11] << 0;
+            }
+        }
+        if ((ranges[0] != 0x7e) ||
+            (ranges[1] != 0x00) ||
+            (ranges[2] != 0x00) ||
+            (ranges[3] != 0x00) ||
+            ((peri_base != BCM2708_PERI_BASE_DEFAULT) && 
+             (peri_base != BCM2709_PERI_BASE_DEFAULT) && 
+             (peri_base != BCM2711_PERI_BASE_DEFAULT))) {
+                 // invalid ranges file
+                 peri_base = 0;
         }
         fclose(fp);
-    } else {
-        // guess peri base based on /proc/cpuinfo hardware field
+    }
+
+    // guess peri_base based on /proc/device-tree/system/linux,revision
+    if (!peri_base) {
+        if ((fp = fopen("/proc/device-tree/system/linux,revision", "rb")) != NULL) {
+            if (fread(rev, 1, sizeof(rev), fp) == 4) {
+                cpu = (rev[2] >> 4) & 0xf;
+                switch (cpu) {
+                    case 0 : peri_base = BCM2708_PERI_BASE_DEFAULT;
+                             break;
+                    case 1 : 
+                    case 2 : peri_base = BCM2709_PERI_BASE_DEFAULT;
+                             break;
+                    case 3 : peri_base = BCM2711_PERI_BASE_DEFAULT;
+                             break;
+                }
+            }
+            fclose(fp);
+        }
+    }
+
+    // guess peri_base based on /proc/cpuinfo hardware field
+    if (!peri_base) {
         if ((fp = fopen("/proc/cpuinfo", "r")) == NULL)
             return SETUP_CPUINFO_FAIL;
 
@@ -104,20 +141,23 @@ int setup(void)
             if (strcmp(hardware, "BCM2708") == 0 || strcmp(hardware, "BCM2835") == 0) {
                 // pi 1 hardware
                 peri_base = BCM2708_PERI_BASE_DEFAULT;
-                found = 1;
             } else if (strcmp(hardware, "BCM2709") == 0 || strcmp(hardware, "BCM2836") == 0) {
                 // pi 2 hardware
                 peri_base = BCM2709_PERI_BASE_DEFAULT;
-                found = 1;
+            } else if (strcmp(hardware, "BCM2710") == 0 || strcmp(hardware, "BCM2837") == 0) {
+                // pi 3 hardware
+                peri_base = BCM2710_PERI_BASE_DEFAULT;
+            } else if (strcmp(hardware, "BCM2711") == 0) {
+                // pi 4 hardware
+                peri_base = BCM2711_PERI_BASE_DEFAULT;
             }
         }
         fclose(fp);
-        if (!found)
-            return SETUP_NOT_RPI_FAIL;
     }
 
     if (!peri_base)
-        return SETUP_NOT_RPI_FAIL;
+        return SETUP_NO_PERI_ADDR;
+
     gpio_base = peri_base + GPIO_BASE_OFFSET;
 
     // mmap the GPIO memory registers
diff --git a/source/c_gpio.h b/source/c_gpio.h
index 06cb4ea..e54b4c0 100644
--- a/source/c_gpio.h
+++ b/source/c_gpio.h
@@ -1,5 +1,5 @@
 /*
-Copyright (c) 2012-2015 Ben Croston
+Copyright (c) 2012-2021 Ben Croston
 
 Permission is hereby granted, free of charge, to any person obtaining a copy of
 this software and associated documentation files (the "Software"), to deal in
@@ -37,7 +37,7 @@ void cleanup(void);
 #define SETUP_MALLOC_FAIL  2
 #define SETUP_MMAP_FAIL    3
 #define SETUP_CPUINFO_FAIL 4
-#define SETUP_NOT_RPI_FAIL 5
+#define SETUP_NO_PERI_ADDR 5
 
 #define INPUT  1 // is really 0 for control register!
 #define OUTPUT 0 // is really 1 for control register!
diff --git a/source/cpuinfo.c b/source/cpuinfo.c
index 5b519bd..7e46a2f 100644
--- a/source/cpuinfo.c
+++ b/source/cpuinfo.c
@@ -1,5 +1,5 @@
 /*
-Copyright (c) 2012-2019 Ben Croston
+Copyright (c) 2012-2021 Ben Croston
 
 Permission is hereby granted, free of charge, to any person obtaining a copy of
 this software and associated documentation files (the "Software"), to deal in
@@ -54,6 +54,7 @@ int get_rpi_info(rpi_info *info)
          sscanf(buffer, "Hardware	: %s", hardware);
          if (strcmp(hardware, "BCM2708") == 0 ||
              strcmp(hardware, "BCM2709") == 0 ||
+             strcmp(hardware, "BCM2711") == 0 ||
              strcmp(hardware, "BCM2835") == 0 ||
              strcmp(hardware, "BCM2836") == 0 ||
              strcmp(hardware, "BCM2837") == 0 ) {
@@ -98,6 +99,8 @@ int get_rpi_info(rpi_info *info)
             switch (revision[len-2]) {
                case '0': info->type = "Compute Module 3+"; info->p1_revision = 0; break;
                case '1': info->type = "Pi 4 Model B"; info->p1_revision = 3; break;
+               case '3': info->type = "Pi 400"; info->p1_revision = 3; break;
+               case '4': info->type = "Compute Module 4"; info->p1_revision = 0; break;
                default : info->type = "Unknown"; info->p1_revision = 3; break;
             } break;
          default: info->type = "Unknown"; info->p1_revision = 3; break;
@@ -111,7 +114,7 @@ int get_rpi_info(rpi_info *info)
          default : info->processor = "Unknown"; break;
       }
       switch (revision[len-5]) {
-         case '0': info->manufacturer = "Sony"; break;
+         case '0': info->manufacturer = "Sony UK"; break;
          case '1': info->manufacturer = "Egoman"; break;
          case '2': info->manufacturer = "Embest"; break;
          case '3': info->manufacturer = "Sony Japan"; break;
@@ -125,6 +128,7 @@ int get_rpi_info(rpi_info *info)
          case 2: info->ram = "1G"; break;
          case 3: info->ram = "2G"; break;
          case 4: info->ram = "4G"; break;
+         case 5: info->ram = "8G"; break;
          default: info->ram = "Unknown"; break;
       }
    } else {
diff --git a/source/py_gpio.c b/source/py_gpio.c
index 9709416..588aaa5 100644
--- a/source/py_gpio.c
+++ b/source/py_gpio.c
@@ -61,8 +61,8 @@ static int mmap_gpio_mem(void)
    } else if (result == SETUP_CPUINFO_FAIL) {
       PyErr_SetString(PyExc_RuntimeError, "Unable to open /proc/cpuinfo");
       return 4;
-   } else if (result == SETUP_NOT_RPI_FAIL) {
-      PyErr_SetString(PyExc_RuntimeError, "Not running on a RPi!");
+   } else if (result == SETUP_NO_PERI_ADDR) {
+      PyErr_SetString(PyExc_RuntimeError, "Cannot determine SOC peripheral base address");
       return 5;
    } else { // result == SETUP_OK
       module_setup = 1;
